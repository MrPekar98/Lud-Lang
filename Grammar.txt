<Start> -> <Namespace> <Imports> <Program>

<Namespace> -> [namespace 'path']
	 
<Var> -> 'identifier'
       | 'identifier'[]
       | 'identifier'[<Expression>]

<Imports> -> import 'path' <Imports>
	   | 'lambda'

<Program> -> <ProtocolDecl> <Program>
	   | <ClassDecl> <Program>
	   | 'lambda'
	   
<ProtocolDecl> -> protocol 'identifier' [inherits <Var>] { <ClassProtAccessors> }

<ClassDecl> -> class 'identifier' [inherits <Var>] [implements <Var> {, <Var>}] { <ClassProtAccessors> }

<ClassProtAccessors> -> <Accessor> <Members> <ClassProtAccessors>
			| -> 'lambda'

<Members> -> <MethodDecl>
		| -> <VarDecl>
		| -> <Constructor>
		| -> <Destructor>

<Statements> -> <Statement> <Statements>
	      | 'lambda'

<Statement> -> <VarDecl>
	     | <Assignment>
	     | <Expression>
	     | <IfStatement>
	     | <ForEach>
	     | <WhileLoop>
	     | <ForLoop>
	     | <Reference>
	     | <SystemCall>
		 | <ExceptionHandler>
		 | <Throw>
	     | break
	     | continue
		 | destroy <Var>
	     | 'lambda'

<SystemCall> -> system(<Literal>)

<ExceptionHandler> -> try { <Statements> } catch { <Statements> } [finally { <Statements> } ]

<Throw> -> throw <Var>
	     
<VarDecl> -> [volatile] [static] [const] <Assignemnt> : <DataType>

<Accessor> -> public
	    | private
	    | protected
	    
<DataType> -> num
	    | string
	    | bool
	    | char
	    | address
		| thread
		| <ArrayType>

<ArrayType> -> [<ArrayType>]
		| <Expression>

<Literal> -> 'number'
	   | 'string'
	   | 'boolean'
	   | 'char'
	   | 'address'
	   | null
	   | <ArrayLiteral>

<Assignment> -> <Reference>
	      | <Reference> = <Expression>
	      | this.<Reference> = <Expression>
	      | super.<Reference> = <Expression>

<Expression> -> [!]<Equals>
	      | create <Var>([<Expression> {, <Expression>}])

<Equals> -> <ArithExpression> == <ArithExpression>
	  | <ArithExpression> != <ArithExpression>
	  | <ArithExpression>

<ArithExpression> -> <BoolXor> | <ArithExpression>
		   | <BoolXor>
		   | <Var>++
		   | <Var>--
		   | <Var>**
		   | <Var>//
		   | ++<Var>
		   |--<Var>
		   | **<Var>
		   | //<Var>

<BoolXor> -> <BoolAnd> ^ <BoolXor>
	   | <BoolAnd>

<BoolAnd> -> <ArithNumberString> & <BoolAnd>
	   | <ArithNumberString>

<ArithNumberString> -> <PlusMinus> % <ArithExpression>
	      	     | <PlusMinus>

<PlusMinus> -> <MultDiv> + <PlusMinus>
	     | <MultDiv> - <PlusMinus>
	     | <MultDiv>

<MultDiv> -> <ArithPow> * <MultDiv>
	   | <ArithPow> / <MultDiv>
	   | <ArithPow>

<ArithPow> -> <ArithParan>^^<ArithExpression>

<ArithParan> -> (<Expression>)
	      | <Literal>
	      | this.<Reference>
	      | super.<Reference>
	      | <Reference>

<ArrayLiteral> -> '{'[<Expression> {, <Expression>}]'}'

<Reference> -> <Var>[.<Reference>]
	     | <Var>([<Expression> {, <Expression>}])[.<Reference>]

<IfStatement> -> if (<BoolExpression>) { <Statements> } <Else>

<Else> -> else if (<BoolExpression>) { <Statements> } <Else>
	| else { <Statements> }
	| 'lambda'

<ForEach> -> foreach (<Var> : <DataType> in <Var>) { <Statements> }

<WhileLoop> -> while ( <BoolExpression> ) { <Statements> }

<ForLoop> -> for (<Var> = <Expression>; <BoolExpression>; <Expression>) { <Statements> }
	   | for (<Var> = <Expression> : <DataType>; <BoolExpression>; <Expression>) { <Statements> }

<MethodDecl> -> [abstract] <Var>([<Var> : <DataType> {, <Var> : <DataType>}]) : void { <Statements> }
	      | [abstact] <Var>([<Var> : <DataType> {, <Var> : <DataType>}]) : <DataType> { <Statements> return <Expression> }

<Constructor> -> constructor([<Var> : <DataType> {, <Var> : <DataType>}]) { <Statements> }

<Destructor> -> destructor([<Var> : <DataType> {, <Var> : <DataType>}]) { <Statements> }