\n: newline
\t: tab
\bt: reversed tab
__________________________________________________________________________________________________________________________________________

<Start> -> <Imports> \n <Program>
	 | <Program>
	 
<Var> -> variable

<Imports> -> import <path> \n <Imports>
	   | 'lambda'

<Program> -> <RulesetDecl>
	   | <ClassDecl>
	   | <Statements>
	   | 'lambda'
	   
<RulesetDecl> -> ruleset <Var> [using <Var> {, <Var>}]: \n \t <Statements> \n \bt <RulesetDecl>
	       | 'lambda'

<ClassDecl> -> class <Var> [+ <Var>] [using <Var> {, <Var>}]: \n \t <Statements> \n \bt <ClassDecl>
	     | 'lambda'

<Statements> -> <Statement> <Statements>
	      | 'lambda'

<Statement> -> <VarDecl>
	     | <MethodDecl>
	     | <Assignment>
	     | <Expression>
	     | 'lambda'
	     
<VarDecl> -> <Accessor> <Modifier> [const] <DataType> <Assignemnt>

<Modifier> -> static
	    | 'lambda'

<Accessor> -> public
	    | private
	    | internal
	    | 'lambda'
	    
<DataType> -> num
	    | string
	    | bool
	    
<Assignment> -> <Var> = <Expression>
	      | <Var>
	      
<Expression> -> <BoolExpression>
	      | <ArithExpression>
	      | <StringExpression>
	      | <Value>

<Value> -> boolean
	 | number
	 | string
	 
<BoolExpression> -> <BoolXor> | <BoolExpression>
		  | <BoolXor>
		  
<BoolXor> -> <BoolAnd> ^ <BoolXor>
	   | <BoolAnd>
	   
<BoolAnd> -> <BoolParan> & <BoolAnd>
	   | <BoolParan>
	   
<BoolParan> -> (<BoolExpression)
	     | <Var>
	     | boolean

<StringExpression> -> string + <StringExpressions>
		    | string

<ArithExpression> -> <PlusMinus> % <ArithExpression>
		   | <PlusMinus>

<PlusMinus> -> <MultDiv> + <PlusMinus>
	     | <MultDiv> - <PlusMinus>
	     | <MultDiv>
		   
<MultDiv> -> <ArithParan> * <MultDiv>
	   | <ArithParan> / <MultDiv>
	   | <ArithParan>
	   
<ArithParan> -> (<ArithExpression>)
	      | number
	      | <Var>

<MethodDecl> ->
